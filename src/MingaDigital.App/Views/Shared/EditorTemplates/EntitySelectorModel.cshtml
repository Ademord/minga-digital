@model EntitySelectorModel

@{
    Func<String, Boolean, String> param = (key, required) =>
    {
        Object value;
        var found = ViewData.ModelMetadata.AdditionalValues.TryGetValue(key, out value);
        if (!found && required)
            throw new Exception($"EntitySelector: Required parameter not found: {key}");
        return value as String;
    };
    
    var apiController = param("Controller", true);
    var apiAction     = param("Action", true);
    var apiParam      = param("ParameterName", false) ?? "term";
    var searchKey     = param("SearchKey", true);
    var searchValue   = param("SearchValue", true);
    
    var endpointUrl    = Url.Action(apiAction, apiController);
    var apiUrlTemplate = $"{endpointUrl}?{apiParam}=%QUERY";
    
    var inputName = Html.NameFor(m => m.Key);
}

<input type="hidden"
  name="@Html.NameFor(m => m.Key)"
  value="@Html.ValueFor(m => m.Key)">

<input type="text" class="form-control @ViewData["class"]"
  data-typeahead-for="@Html.NameFor(m => m.Key)"
  name="@Html.NameFor(m => m.Value)"
  value="@Html.ValueFor(m => m.Value)">

<script>

$(function () {

  var apiUrlTemplate  = '@apiUrlTemplate'
  var keyAttribute   = '@searchKey';
  var valueAttribute = '@searchValue';

  var engine = new Bloodhound({
    remote: apiUrlTemplate,
    datumTokenizer: function (item) {
      return Bloodhound.tokenizers.whitespace(item[keyAttribute]);
    },
    queryTokenizer: Bloodhound.tokenizers.whitespace
  });

  engine.initialize();

  var $input  = $('input[data-typeahead-for="@inputName"]');
  var $output = $('input[name="@inputName"]');

  var typeaheadDataset = {
    source: engine.ttAdapter(),
    displayKey: valueAttribute,
    templates: { }
  };

  var lastGoodValue = null;

  $input.typeahead(null, typeaheadDataset);

  $input.on('change', function () {
    // invalidate
    if ($input.val() !== lastGoodValue) {
      $output.val('');
    }
  });

  $input.on('typeahead:selected typeahead:autocompleted', function (ev, item, dataset) {
    // valid
    $output.val(item[keyAttribute]);
    lastGoodValue = $input.val();
  });

});

</script>
